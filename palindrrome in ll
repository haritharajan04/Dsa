class Solution {
    public boolean isPalindrome(ListNode head) {
        Stack<Integer> st = new Stack<>();
        ListNode temp = head;
        
        // Push all elements to the stack
        while (temp != null) {
            st.push(temp.val);
            temp = temp.next;
        }

        // Compare with stack elements
        temp = head;
        while (temp != null) {
            if (temp.val != st.peek()) {
                return false;
            }
            st.pop();
            temp = temp.next;
        }

        return true;
    }
}


optimal
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;

        // Step 1: Find the middle (end of first half)
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse second half
        ListNode secondHalfStart = reverseList(slow.next);

        // Step 3: Compare both halves
        ListNode p1 = head;
        ListNode p2 = secondHalfStart;
        boolean result = true;
        while (p2 != null) {
            if (p1.val != p2.val) {
                result = false;
                break;
            }
            p1 = p1.next;
            p2 = p2.next;
        }

        // Step 4 (Optional): Restore the list
        slow.next = reverseList(secondHalfStart);

        return result;
    }

    // Helper to reverse a linked list
    private ListNode reverseList(ListNode head) {
        ListNode prev = null, curr = head;
        while (curr != null) {
            ListNode nextTemp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }
}

